import { Request } from 'express';
import { ObjectId } from 'mongodb';
import { PopulatedDatabasePost } from './posts';

/**
 * Represents user credentials for authentication.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 */
export interface UserCredentials {
  username: string;
  password: string;
}

/**
 * Represents a user document, including user credentials and additional details.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of the user (optional).
 * - `followers`: An array of usernames that follow user (optional).
 * - `following`: An array of usernames that the user follow (optional).
 * - `recipeBookPublic`: A boolean indicating recipe book privacy.


 */
export interface User extends UserCredentials {
  dateJoined: Date;
  biography?: string;
  certified: boolean;
  followers: string[];
  following: string[];
  privacySetting: 'Public' | 'Private';
  recipeBookPublic: boolean;
  postsCreated: Posts[];
  highScore: number;
}

/**
 * Represents a user document in the database.
 * - `username`: The unique username of the user.
 * - `password`: The user's password.
 * - `dateJoined`: The date when the user registered.
 * - `biography`: A short description or bio of the user (optional).
 * - `followers`: An array of usernames that follow user (optional).
 * - `following`: An array of usernames that the user follow (optional).
 * - `recipeBookPublic`: A boolean indicating recipe book privacy.
 * - `_id`: The unique identifier for the user, generated by MongoDB.
 */

export interface DatabaseUser extends Omit<User, 'postsCreated'> {
  _id: ObjectId;
  postsCreated: ObjectId[];
}

/**
 * Express request for user login, containing user credentials.
 * - `username`: The username submitted in the request (body).
 * - `password`: The password submitted in the request (body).
 * - `biography`: Optional field for biography information (body).
 * - `followers`: An array of usernames that follow user (body).
 * - `following`: An array of usernames that the user follow (body).
 * - `recipeBookPublic`: A boolean indicating recipe book privacy (body).
 */
export interface UserRequest extends Request {
  body: {
    username: string;
    password: string;
    biography?: string;
    certified: boolean;
    followers: string[];
    following: string[];
    privacySetting: 'Public' | 'Private';
    recipeBookPublic: boolean;
    postsCreated: Posts[];
    highScore: number;
  };
}

/**
 * Express request for querying a user by their username.
 * - `username`: The username provided as a route parameter.
 */
export interface UserByUsernameRequest extends Request {
  params: {
    username: string;
  };
}

/**
 * Represents a "safe" user object that excludes sensitive information like the password.
 */
export type SafeDatabaseUser = Omit<DatabaseUser, 'password'>;

export interface SafePopulatedDatabaseUser extends Omit<DatabaseUser, 'postsCreated' | 'password'> {
  postsCreated: PopulatedDatabasePost[];
}

/**
 * Represents the response for user-related operations.
 * - `SafeDatabaseUser`: A user object without sensitive data if the operation is successful.
 * - `error`: An error message if the operation fails.
 */
export type UserResponse = SafeDatabaseUser | { error: string };

export type UserPopulatedResponse = SafePopulatedDatabaseUser | { error: string };

/**
 * Represents the response for multiple user-related operations.
 * - `SafeDatabaseUser[]`: A list of user objects without sensitive data if the operation is successful.
 * - `error`: An error message if the operation fails.
 */
export type UsersResponse = SafeDatabaseUser[] | { error: string };

export type UsersPopulatedResponse = SafePopulatedDatabaseUser[] | { error: string };

/**
 * Express request for updating a user's biography.
 * - `username`: The username whose biography is being updated (body).
 * - `biography`: The new biography content to be set (body).
 */
export interface UpdateBiographyRequest extends Request {
  body: {
    username: string;
    biography: string;
  };
}

/**
 * Express request for updating a user's recipeBook privacy status.
 * - `username`: The username whose recipeBook privacy status is being updated (body).
 * - `recipeBookPublic`: The new privacy status (true for public, false for private).
 */
export interface UpdateRecipeBookPrivacy extends Request {
  body: {
    username: string;
    recipeBookPublic: boolean;
  };
}

/**
 * Express request for updating a user's certification status.
 * - `username`: The username whose certification status is being updated (body).
 * - `certified`: The new certification status.
 */
export interface UpdateCertification extends Request {
  body: {
    username: string;
    certified: boolean;
  };
}

/**
 * Express request for updating a user's high score.
 * - `username`: The username whose high score is being updated (body).
 * - `highScore`: The new high score.
 */
export interface UpdateHighScore extends Request {
  body: {
    username: string;
    highScore: number;
  };
}

/**
 * Express request for following a new user.
 * - `username`: The username whose following list is being updated.
 * - `followingUsername`: The new user to be followed.
 */
export interface UpdateFollowRequest extends Request {
  body: {
    username: string;
    usernameFollowed: string;
  };
}

/**
 * Express request for updating a user's privacy setting.
 * `username`: The username whose privacy setting is being updated (body).
 * `privacySetting`: The new privacy setting to be set (body).
 */
export interface UpdatePrivacyRequest extends Request {
  body: {
    username: string;
    privacySetting: 'Public' | 'Private';
  };
}

/**
 * Express request for updating a user's privacy setting.
 * `username`: The username whose privacy setting is being updated (body).
 * `privacySetting`: The new privacy setting to be set (body).
 */
export interface UpdatePosts extends Request {
  body: {
    username: string;
    postID: ObjectId;
    action: 'save' | 'remove';
  };
}
